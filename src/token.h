#ifndef TOKEN_H
#define TOKEN_H

typedef enum TokenType {
    LET,
    VAR,
    CONST,
    FUNCTION,
    TYPEOF,
    NULL_,
    TRUE,
    FALSE,
    NAN,
    NEW,
    DELETE,
    IN,
    THIS,
    INSTANCEOF,
    BREAK,
    DEBUGGER,
    EXPORT,
    FINALLY,
    SUPER,
    THROW,
    TRY,
    CLASS,
    DEFAULT,
    ELSE,
    EXTENDS,
    IF,
    PACKAGE,
    RETURN,
    SWITCH,
    WHILE,
    AWAIT,
    CASE,
    ENUM,
    FOR,
    WITH,
    CATCH,
    DO,
    EVAL,
    YIELD,
    VOID,

    PLUS,
    MINUS,
    STAR,
    SLASH,
    MODULO,
    DOUBLE_PLUS,
    DOUBLE_MINUS,
    DOUBLE_STAR,
    EXCLAMATION,
    DOUBLE_PIPE,
    DOUBLE_AMPERSAND,
    DOUBLE_QUESTION,
    SINGLE_EQUALS,
    DOUBLE_EQUALS,
    TRIPLE_EQUALS,
    DOT,
    COMMA,
    EXCLAMATION_DOUBLE_EQUALS,
    EXCLAMATION_EQUALS,
    LESS_THAN,
    GREATER_THAN,
    LESS_THAN_EQUAL,
    GREATER_THAN_EQUAL,
    PLUS_EQUALS,
    MINUS_EQUALS,
    STAR_EQUALS,
    SLASH_EQUALS,
    MODULO_EQUALS,
    SEMI_COLON,
    COLON,
    LEFT_PAREN,
    RIGHT_PAREN,
    LEFT_BRACE,
    RIGHT_BRACE,
    LEFT_SQUARE_BRACKET,
    RIGHT_SQUARE_BRACKET,
    SINGLE_AMPERSAND,
    SINGLE_PIPE,
    TRIPLE_DOT,
    TILDE,
    CARET,
    LEFT_SHIFT,
    RIGHT_SHIFT,
    UNSIGNED_RIGHT,

    IDENTIFIER,
    NUMBER,
    STRING,
    UNKNOWN,
    EOF_TOKEN,
} TokenType;

typedef struct Token {
    TokenType type;
    char* lexeme;
} Token;

typedef struct TokenMap {
    char *lexeme;
    TokenType type;
} TokenMap;

#endif